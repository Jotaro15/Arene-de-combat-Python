import random

"""
    #Etape 1
    Cr√©er une classe Hero.
    Un H√©ro doit avoir un nom, et une m√©thode publique nomm√©e talk()
    Cr√©ez deux H√©ros, ces derniers doivent s'appeler Jay et Silent Bob.
    Faites en sorte que nos deux protagonistes parlent et aient une r√©plique diff√©rente.
    
    #Etape 2
    Nos deux protagonistes sont en d√©saccord.
    Faites en sorte qu'ils aient des points de vie et qu'un tape l'autre, lui √¥tant des PV.
    
    #Etape 3
    Les PV sont-ils priv√©s ou publics?
    Quelles m√©thodes sont √† mettre en place?
    
    #Etape 4
    Commencez √† concevoir votre histoire et d√©cliner les types de h√©ros. 
    Vous pourriez par exemple simuler un combat : 
    - Classe H√©ro : Barbare
        - Un barbare ayant des points de rage.
        - Il peut utiliser sa rage pour r√©aliser une attaque sp√©ciale. Infligeant un d√©gat sup√©rieur al√©atoire.
        - A chaque tour il gagne un peu de rage jusque sa limite de rage.
    - Classe Magicien
        - Consomme de la mana
        - Peut lancer un sort de poison
        - Le magicien regagne de la mana avec le temps jusque sa limite de mana
    - Classe Soldat
        - Attaque classique
        - Equipement : Ep√©e, Armure
    
    #Etape 5
    Ajoutez une ar√®ne, au sein de cette derni√®re, nous allons lancer un combat entre H√©ros.
    Ces derniers s'affrontent en tour par tour
    La partie continue tant qu'il reste plus d'un H√©ro en vie
    Un H√©ro Barbare gagne de la rage √† la fin de chaque tour
    Un H√©ro Mage gagne du mana √† la fin de chaque tour
    
    #Etapes suivantes en attendant
    Ajouter des :
        - Enemis communs par ex: Orc, Gobelin,  Troll des montagnes. 
                ‚Üí Si un enemi commun entre dans l'ar√®ne, leurs combats s'arr√™tent pour taper ensemble sur cet enemi.
        - Armes : Ep√©e, Ep√©e √† deux mains, Baton 
        - Armure, bouclier, cape
        - Equipements suppl√©mentaires : potions (soins, invincibilit√©)
            ‚Üí Les h√©ros commencent automatiquement avec un √©quipement suppl√©mentaire al√©atoire
    D√©finissez leurs r√®gles et fonctionnement.  D√©clinez le th√®me selon vos envies.

    #Bonus
    Ajoutez une classe voleur. 
    Ce dernier peut voler un item appartenant a un joueur. 
    Les items √©tant les armes, armures ou des √©quipements. 

    Le mage peut lancer un sort de feu d√©sactivant les items m√©taliques adversaires.

    Les items ont une jauge d'usure, a chaque utilisation ils se consomment.
    Ex : Une potion de vie peut √™tre utilis√©e deux fois. Une √©p√©e s'use √† chaque attaque et se d√©truit au 10e coup etc...
"""

class Hero:
    """
    Les h√©ros sont des combattants de l'ar√®ne qui ont une attaque de base et une attaque sp√©ciale.
    Il peuvent aussi avoir des items et des potions.
    Ils combattent en priorit√© les m√©chants et se combattent entre eux d√®s qu'il n'y a plus de m√©chants.
    """
    def __init__(self, name, hero_type, pv):
        """
        On associe les noms,  attaques, types (Magicien, Soldat ou Barbare) et pv aux attributs associ√©s.
        """
        self.name = name
        self.hero_type = hero_type
        self.pv = pv
        self.attacks = {"Magicien": {"base": 3, "poison": 5},  # On donne les dmg des attaques de base et sp√©ciales pour chaque type
                        "Soldat": {"base": 3, "equipement": 2},
                        "Barbare": {"base": 5, "rage": 6}}
        self.special_attacks_counter = 0 #Les attaques sp√©ciales se lancent √† partir d'un certain nb de tour, donc on a un compteur de lanc√©
        self.luck_counter = 0

    def attack(self, target):
        """
        On d√©finit l'attaque de tous les h√©ros, un par un.
        On d√©finit aussi la notion de priorit√© (les h√©ros attaquent d'abord les m√©chants, puis s'attaquent entre eux.
        """
        if isinstance(target, Mechant): #quand la cible est un m√©chant
            target.pv -= self.attacks[self.hero_type]["base"]
            print(f"‚öî{self.name} attaque {target.name} pour {self.attacks[self.hero_type]['base']} points de d√©g√¢ts. Il lui reste {target.pv}pv.")

        else:
            for mechant in self.mechants: #quand un m√©chant attaque un m√©chant
                if mechant.pv > 0: #tant qu'il est en vie (qu'il a + de 0 pv)
                    mechant.pv -= self.attacks[self.hero_type]["base"] 
                    print(f"‚öî{self.name} attaque {mechant.name} pour {self.attacks[self.hero_type]['base']} points de d√©g√¢ts. Il lui reste {target.pv}pv.")

            for hero in self.heroes: #quand un h√©ro attaque un h√©ro
                if hero != self and hero.pv > 0: #tant qu'il est en vie (qu'il a + de 0 pv)
                    hero.pv -= self.attacks[self.hero_type]["base"]
                    print(f"‚öî{self.name} attaque {hero.name} pour {self.attacks[self.hero_type]['base']} points de d√©g√¢ts. Il lui reste {target.pv}pv.")

        self.special_attacks_counter += 1 #les 2 compteur pour les attaques sp√©ciales et la chance augmentent de +1 √† chaque tour
        self.luck_counter += 1
        if self.hero_type == "Magicien" and self.special_attacks_counter % 3 == 0:#attaque sp√©ciale du Magicien (attaque poison) se d√©clenche au bout de 3 tours
            target.pv -= self.attacks[self.hero_type]["poison"] #attaque du type de h√©ro est automatiquement son attaque sp√©ciale
            print(f"‚ò†{self.name} lance une attaque poison sur {target.name} pour {self.attacks[self.hero_type]['poison']} points de d√©g√¢ts. Il lui reste {target.pv}pv.")

        #if self.hero_type == "Magicien" and self.luck_counter % 5 == 0 # Quand la chance du Magicien a augment√© de 5, il trouve "par hasard" une potion de soin.
            #self.pv[self.hero_type] += 
        if isinstance(target, Mechant) and target.pv <= 0 and self.hero_type == "Soldat": #attaque sp√©ciale du Soldat (les √©quipements)
            self.attacks[self.hero_type]["base"] += self.attacks[self.hero_type]["equipement"] #les d√©gats de l'√©quipement s'ajoutent aux d√©gats de l'attaque de base
            print(f"üó°{self.name} gagne un √©quipement et son attaque augmente de {self.attacks[self.hero_type]['equipement']} points")
            
        if self.hero_type == "Barbare" and self.special_attacks_counter % 3 == 0: #attaque sp√©ciale du Barbare (rage)
            target.pv -= self.attacks[self.hero_type]["rage"] #attaque du type de h√©ro est automatiquement son attaque sp√©ciale
            print(f"üî•{self.name} lance une attaque rage sur {target.name} pour {self.attacks[self.hero_type]['rage']} points de d√©g√¢ts. Il lui reste {target.pv}pv.")

        if isinstance(target, Hero) and target.pv <= 0:
            print(f"üï±{target.name} est mort !") #quand les pv atteignent 0, on affiche que le h√©ro est mort.
            
    def potion(self):
        """
        Quand un h√©ro fait appel √† la m√©thode potion (il boit une potion de healh), il re√ßoit un nb de pv al√©atoire entre 5 et 15pv.
        """
        pv_bonus = random.randint(5, 15) #la potion donne entre 5 et 15pv
        self.pv += pv_bonus #les pv des h√©ros sont augment√©s du nb de pv de la potion
        print(f"‚úß{self.name} a re√ßu une potion et a gagn√© {pv_bonus} points de vie ! Il a d√©sormais {self.pv}pv !")

class Magicien(Hero):
    """
    La classe Magicien appartient √† la classe H√©ro.
    """
    def __init__(self, name, pv): #on associe la classe Magicien avec ses valeurs nom et pv
        super().__init__(name, "Magicien", pv)

class Soldat(Hero):
    """
    La classe Soldat appartient √† la classe H√©ro.
    """
    def __init__(self, name, pv): #on associe la classe Soldat avec ses valeurs nom et pv
        super().__init__(name, "Soldat", pv)

class Barbare(Hero):
    """
    La classe Barbare appartient √† la classe H√©ro.
    """
    def __init__(self, name, pv): #on associe la classe Barbare avec ses valeurs nom et pv
        super().__init__(name, "Barbare", pv)

class Mechant:
    """
    Les m√©chants vont combattre dans l'ar√®ne contre les h√©ros.
    Ils ne s'attaquent pas entre m√©chants.
    """
    def __init__(self, name, mechant_type, pv):
        """
        On associe les noms,  attaques, types (Gobelin ou Ogre) et pv aux attributs associ√©s.
        """
        self.name = name
        self.mechant_type = mechant_type
        self.pv = pv
        self.attacks = {"Gobelin": {"base": 2}, # On donne les dmg des attaques de base pour chaque type
                        "Ogre": {"base": 4}}

    def attack(self, targets):
        """
        On d√©finit l'attaque des m√©chants.
        Tant qu'il y a  des h√©ros vivants, les m√©chants leur tape dessus.
        Les m√©chants choisissent leur cible au hasard parmi les h√©ros.
        """
        alive_heroes = [target for target in targets if isinstance(target, Hero) and target.pv > 0]
        if not alive_heroes:
            return

        target = random.choice(alive_heroes)
        target.pv -= self.attacks[self.mechant_type]["base"]
        print(f"‚öî {self.name} attaque {target.name} pour {self.attacks[self.mechant_type]['base']} points de d√©g√¢ts. Il lui reste {target.pv}pv.")
        
class Arene:
    """
    C'est dans l'Arene que les h√©ros et les m√©chants vont se battre. Il ne peut y avoir qu'un seul vainqueur, et c'est le dernier en vie.
    C'est aussi dans l'Arene que l'utiisateur peut choisir le nombre de m√©chants, et tous les h√©ros qui se battrons.
    """
    def __init__(self):
        """
        La fonction __init__ contient le 'formulaire' que l'utlisateur remplit avant de commencer la partie pour cr√©er les h√©ros et les m√©chants.
        """
        self.is_finished = False
        self.heroes = []
        self.mechants = []
        
        num_gobelins = int(input("Combien de gobelins voulez-vous dans l'ar√®ne ? "))
        num_ogres = int(input("Combien d'ogres voulez-vous dans l'ar√®ne ? "))
        
        for i in range(num_gobelins):
            name = input(f"Nom du gobelin {i+1} : ")
            self.mechants.append(Mechant(name, "Gobelin", 10)) #on initialise le nom rentr√© par l'utilisateur avec son type et ses pv
            
        for i in range(num_ogres):
            name = input(f"Nom de l'ogre {i+1} : ")
            self.mechants.append(Mechant(name, "Ogre", 15)) #on initialise le nom rentr√© par l'utilisateur avec son type et ses pv
            
        for i in range(3):
            name = input(f"Nom du h√©ros {i+1} : ")
            hero_type = input(f"Type du h√©ros {i+1} (Magicien, Soldat ou Barbare) : ")
            pv = int(input(f"PV du h√©ros {i+1} : "))
            
            if hero_type == "Magicien":
                self.heroes.append(Magicien(name, pv)) #on initialise le nom rentr√© par l'utilisateur avec son type et ses pv
            elif hero_type == "Soldat":
                self.heroes.append(Soldat(name, pv)) #on initialise le nom rentr√© par l'utilisateur avec son type et ses pv
            elif hero_type == "Barbare":
                self.heroes.append(Barbare(name, pv)) #on initialise le nom rentr√© par l'utilisateur avec son type et ses pv
        
    def start(self):
        """
        On lance la partie gr√¢ce √† l'appel de cette fonction. Une fois la partie lanc√©e, celle-ci va tourner jusqu'√† ce qu'il n'y ait plus qu'1 survivant.
        """
        print("‚òûD√©but de la partie. Bon courage !")
        while not self.is_finished:
            alive_heroes = [hero for hero in self.heroes if hero.pv > 0] #nb de h√©ro qui ont + de 0 pv
            alive_mechants = [mechant for mechant in self.mechants if mechant.pv > 0] #nb de m√©chants qui ont + de 0pv
            if not alive_heroes or not alive_mechants:
            #quand il n'y plus aucun combattant vivant, le jeu s'arr√™te
                self.is_finished = True
                continue
            
            for hero in self.heroes:
                if hero.pv <= 0:
                    continue #tant que le h√©ro est vivant, il continue d'attaquer √† chaque tour
                targets = alive_mechants.copy() #pour les h√©ros, la priorit√© c'est les m√©chants. 
                if not len(targets): # Il n'y a plus de m√©chants √† taper
                    targets.extend([h for h in alive_heroes if h != hero])
                if targets:
                    target = random.choice(targets) #avec random, on choisi le h√©ro choisi al√©atoirement une cible
                    hero.attack(target) #il attaque toujours sa cible
            for mechant in self.mechants:
                if mechant.pv <= 0: #tant que le m√©chant est vivant, il continue d'attaquer √† chaque tour
                    continue
                targets = alive_heroes.copy() #pour les m√©chants, la priorit√© c'est les h√©ros
                if targets:
                    mechant.attack(targets) #il attaque toujours sa cible

if __name__ == '__main__':
    Arene().start() #la partie se lance automatiquement √† chaque fois qu'on "run" grace √† l'appel de la m√©thode 'start'
